
```{r}
 mplot <- function(x, ..., fill_colour = "black", title = NULL, row_labels = NULL, col_labels = NULL, palette_colors = NULL) {
   d <- data.frame(
     x = rep(1:ncol(x), each = nrow(x)),
     y = rep(nrow(x):1, ncol(x)),
     z = as.integer(x)
   )
   
   if (!is.null(palette_colors)) {
     d$palette_colors <- rep(palette_colors, ncol(x))
   }
   
   if (is.null(col_labels)) col_labels <- colnames(x)
   if (is.null(row_labels)) row_labels <- rev(rownames(x))
   
   p <- ggplot(d, aes(x, y)) +
     geom_tile(col = "grey50", 
               linewidth = 0.5, 
               aes(fill = ifelse(z == 1, palette_colors, "white"))) +
     scale_fill_identity() +  
     coord_equal(expand = FALSE) +
     scale_x_continuous(
       breaks = 1:ncol(x),
       labels = col_labels,
       position = "top"
     ) +
     scale_y_continuous(
       breaks = 1:nrow(x),
       labels = row_labels
     ) +
     theme(
       axis.text = element_text(size = rel(0.3)),
       axis.ticks = element_blank(),
       legend.position = "none",
       plot.title = element_text(hjust = 1)
     ) +
     labs(x = "", y = "") +
     rotate_x_text(angle = 90, hjust = 0, vjust = 0.5)
   
   p
 }
 
 increase_focus <- function(x, group = NULL) {
   mcp <- apply(
     x, 
     MARGIN = 1, 
     FUN = \(z) { mean(which(z == 1)) }, 
     simplify = FALSE
   ) |> unlist()
   row_order <- order(mcp, na.last = TRUE)
   x <- x[row_order, ]
   
   if (!is.null(group)) {
     group <- group[row_order]
   }
   
   mrp <- apply(
     x, 
     MARGIN = 2, 
     FUN = \(z) { mean(which(z == 1)) }, 
     simplify = FALSE
   ) |> unlist()
   x <- x[, order(mrp, na.last = TRUE)]
   
   list(matrix = x, group = group)
 }
 
 concentrate <- function(x, group = NULL, max_iter = 100) {
   old <- x
   not_identical <- TRUE
   iter <- 0
   
   while (not_identical && iter < max_iter) {
     result <- increase_focus(old, group)
     new <- result$matrix
     group <- result$group
     not_identical <- !identical(old, new)
     old <- new
     iter <- iter + 1
   }
   
   if (iter == max_iter) {
     warning("Reached maximum iterations without convergence.")
   }
   
   list(matrix = new, group = group)
 }
 
 produce_clusters <- function(artifact_data, artifact_data_unique, method = "seriation", color_palette = c("#8DD3C7", "#FFFFB3")){
   
   artifact_data <- artifact_data %>% 
     select_if(~ !is.numeric(.) || sum(.) != 0) %>% 
     mutate_all(~ as.numeric(. > 0))
   
   jac <- vegdist(artifact_data, "jaccard", binary = TRUE)
   dm <- as.matrix(jac)
   
   if(method == "seriation"){
   artifact_matrix <- as.matrix(artifact_data)
   rownames(artifact_matrix) <- rownames(artifact_data)
 
   group <- artifact_data_unique$group
   unique_group <- unique(group)
  # color_palette <-  RColorBrewer::brewer.pal(length(unique_group), "Set3")
   row_colors <- setNames(color_palette, unique_group)
   result <- concentrate(artifact_matrix, group = group)
   concentrated_matrix <- result$matrix
   reordered_group <- result$group
   group_colors <- row_colors[reordered_group]
 
   final_plot <- mplot(concentrated_matrix,
     palette_colors = group_colors)
   }
   
   if(method == "network"){
   disim <- 1 - dm
   disim[disim<0.2] <- 0
   disim_net <- network(disim,
                        directed=F,
                        ignore.eval=F,
                        names.eval='weight')
   disim_net %v% 'vertex.names' <- row.names(artifact_data)
   set.seed(500)
   
   final_plot <- ggraph(disim_net, layout="fr") +
       geom_edge_link(aes(width = weight, 
                          alpha=weight), 
                      edge_colour = "black", 
                      show.legend= F,
                     ) +
       scale_edge_width(range=c(0.5,1.5)) +
       scale_edge_colour_gradient(low = "#CCCCCC",
                                  high = "#000000") +
       geom_node_point(alpha=1, size=5) +
       geom_node_text(aes(label=row.names(artifact_data)), 
                      size=3, 
                      family= "Arial", 
                      repel=T, max.overlaps = 100) +
       theme(text= element_text(size = 15), 
             panel.background = element_rect(fill = 'white')) +
     border(color = "black", size = 0.5)
     
   }
   return(final_plot)
 }

```

```{r}
seriation_trans <- produce_clusters(trans_artifact_data, 
                                    trans_unique_data, 
                                    method = "seriation")

seriation_proto <- produce_clusters(proto_artifact_data,  
                                    proto_unique_data, 
                                    color_palette = c("#FFFFB3", "#8DD3C7"),
                                    method ="seriation")

seriation_early <- produce_clusters(early_artifact_data, 
                                    early_unique_data, 
                                    method = "seriation")

seriation_evolved <- produce_clusters(evolved_artifact_data, 
                                      evolved_unique_data, 
                                      method = "seriation")
```

```{r}
network_trans <- produce_clusters(trans_artifact_data, trans_unique_data, method = "network")
network_proto <- produce_clusters(proto_artifact_data, proto_unique_data, method = "network")
network_early <- produce_clusters(early_artifact_data, early_unique_data, method = "network")
network_evolved <- produce_clusters(evolved_artifact_data, evolved_unique_data, method = "network")

```


```{r}
ser_net_trans <- plot_grid(seriation_trans, network_trans, align = "hv", labels = "AUTO", rel_widths = c(1.3, 1.4))
ser_net_proto <- plot_grid(seriation_proto, network_proto, align = "hv", rel_widths = c(1.4, 1.4))
ser_net_early <- plot_grid(seriation_early, network_early, align = "hv", rel_widths = c(1.65, 1.8))
ser_net_evo <- plot_grid(seriation_evolved, network_evolved, align = "hv", rel_widths = c(1.4, 1.4))

final <- plot_grid(ser_net_trans, ser_net_proto, ser_net_early, ser_net_evo, align = "hv", ncol = 1, labels = c("Transitional", "Proto", "Early", "Evolved"))

ggsave(final, 
      filename =  "poster.png",
       bg = "white", h = 9, w = 4.5)
```


```{r}
ser_net_trans <- plot_grid(seriation_trans, network_trans, align = "hv", labels = "AUTO", ncol = 1)
ser_net_proto <- plot_grid(seriation_proto, network_proto, align = "hv", ncol = 1)
ser_net_early <- plot_grid(seriation_early, network_early, align = "hv", ncol = 1)
ser_net_evo <- plot_grid(seriation_evolved, network_evolved, align = "hv", ncol = 1)

final <- plot_grid(ser_net_trans, ser_net_proto, ser_net_early, ser_net_evo, align = "hv", ncol = 4, labels = c("Transitional", "Proto", "Early", "Evolved"))

ggsave(final, 
      filename =  "poster2.png",
       bg = "white", w = 12)

```


```{r}
ser_plot <- plot_grid(seriation_trans, seriation_proto, seriation_early, seriation_early, align = "hv", ncol = 1, labels = c("Transitional", "Proto", "Early", "Evolved"), label_size = 9)
net_plot <- plot_grid(network_trans, network_proto, network_early, network_evolved, align = "hv", ncol = 1)

  final <- plot_grid(ser_plot, net_plot, align = "hv", ncol = 2, rel_widths = c(1.3, 1), labels = "AUTO", label_x = c(0, -0.07))

ggsave(final, 
      filename =  "poster3.png", bg = "white", w = 5, h = 7)
```

```{r}
sign_type_df <- signbase_full_clean %>% 
  pivot_longer(cols = line:star) %>% 
  filter(value != 0) %>% 
  mutate(sign_type = name) %>% 
  group_by(sign_type) %>% 
  summarise(value = n()) %>% 
  arrange(desc(value))

sign_type_plot <- ggplot(sign_type_df) +
  aes(reorder(sign_type, value), x = sign_type, y = value) +
  geom_col() +
  xlab("Sign type") +
  ylab("Count") +
  theme(axis.title = element_text(size = 10)) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, ))
  
  
ggsave(sign_type_plot, 
      filename =  "signtype.png",
       bg = "white", w = 5, h = 3)

```

```{r}
library(rnaturalearth)

as_factor <- function(x, reverse = FALSE) {
  lvl <- unique(x)
  if (reverse) {
    lvl <- rev(lvl)
  }
  factor(x, levels = lvl)
}

to_long <- function(from, factor = FALSE, reverse = FALSE) {
  x <- data.frame(
    row = as.vector(row(from, as.factor = factor)),
    column = as.vector(col(from, as.factor = factor)),
    value = as.vector(from),
    stringsAsFactors = FALSE
  )
  if (factor) {
    x$row <- as_factor(x$row, reverse = reverse)
    x$column <- as_factor(x$column, reverse = reverse)
  }
  return(x)
}

autoplot.DiversityIndex <- function(object, ...) {
  ## Prepare data
  count <- cbind.data.frame(
    label = object@labels,
    x = object@size,
    y = object@.Data
  )
  
  ## Simulated assemblages
  gg_sim <- NULL
  if (length(object@simulation) != 0) {
    # Build a long table for ggplot2
    refined <- object@simulation
    
    sim_stacked <- to_long(refined[, -c(1)], factor = TRUE)
    sim <- cbind.data.frame(
      size = refined[, 1],
      sim_stacked,
      Estimate = ifelse(sim_stacked[["column"]] == "mean", "mean", "conf. int.")
    )
    gg_sim <- ggplot2::geom_path(
      mapping = ggplot2::aes(
        x = .data$size,
        y = .data$value,
        colour = .data$Estimate,
        group = .data$column
      ),
      data = sim,
      na.rm = TRUE,
      inherit.aes = FALSE
    )
  }
  
  y_lab <- switch (
    class(object),
    HeterogeneityIndex = "Heterogeneity",
    EvennessIndex = "Evenness",
    RichnessIndex = "Richness",
    "Diversity"
  )
  
  ## ggplot
  ggplot2::ggplot(data = count) +
    ggplot2::aes(x = .data$x, y = .data$y, label = .data$label) +
    ggplot2::geom_point() +
    gg_sim +
    ggplot2::scale_x_log10(name = "Sample size") +
    ggplot2::scale_y_continuous(
      name = "Heterogeneity"
    )
}

plot_diversity_fn <- function(input_df){

signs <-
  input_df %>% 
  select(
         site_name,
         c(line:star)) %>% 
  group_by(site_name) %>% 
  summarise(across(where(is.numeric), ~ sum(.))) %>% 
  column_to_rownames("site_name") 

diversity_index <- 
  heterogeneity(signs, method = "shannon")

diversity_sim <- simulate(diversity_index)

autoplot.DiversityIndex(diversity_sim) +
  geom_text_repel(aes(label = diversity_sim@labels),
                  size = 3, max.overlaps = 15) +
  guides(colour = "none") +
  theme_minimal(base_size = 8) +
  border(color = "black", size = 0.5)
}

signbase_full_clean_diversity_plot_by_period <- 
time_unique_data_full %>% 
  nest_by(time_period) %>% 
  mutate(plot = list(plot_diversity_fn(data)))

library(cowplot)
plot_grid(plotlist =  signbase_full_clean_diversity_plot_by_period$plot,
          labels = signbase_full_clean_diversity_plot_by_period$time_period,
          label_size = 8, vjust = 2, hjust = -0.6)
```

